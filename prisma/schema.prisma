generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ENABLED
  DISABLED
}

enum Role {
  ADMIN
  STOCK_OWNER
  STOCK_MANAGER
}

model User {
  id            String  @id @default(uuid())
  email         String  @unique
  userName      String
  fullName      String
  password      String
  emailVerified Boolean @default(false)
  role          Role    @default(STOCK_OWNER)
  status        Status  @default(ENABLED)
  stockOwnerId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verificationCodes UserVerificationCodes[]
  Stock             Stock[]
}

model UserVerificationCodes {
  id     String @id @default(uuid())
  email  String
  otp    String
  userId String @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @default(now()) @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
}

model Supplier {
  id      String @id @default(uuid())
  name    String
  contact String
  status  Status @default(ENABLED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Procut Procut[]
}

model Stock {
  id            String @id @default(uuid())
  name          String
  streetAddress String
  status        Status @default(ENABLED)
  managerId     String @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User     @relation(fields: [managerId], references: [id], onDelete: Cascade)
  Procut Procut[]
}

model Procut {
  id             String @id @default(uuid())
  name           String
  quantity       Int
  thresholdValue Int
  supplierId     String
  stockId        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supplier Supplier @relation(fields: [supplierId], references: [id])
  stock    Stock    @relation(fields: [stockId], references: [id])
}